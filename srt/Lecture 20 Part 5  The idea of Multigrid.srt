1
00:00:00,000 --> 00:00:05,820
if you are if you're using any discretization method you know that more

2
00:00:05,820 --> 00:00:12,360
and you have the more accurate the solution is but this tells you the

3
00:00:12,360 --> 00:00:17,460
bigger the n is the slower if you have to use it with method the slower the

4
00:00:17,460 --> 00:00:25,380
solution is going to converge so there is a trade-off that okay if you have

5
00:00:25,380 --> 00:00:36,960
finite amount of computation time you may you can you have to balance if you

6
00:00:36,960 --> 00:00:44,040
increase n you should not only expect your solution your calculations to be to

7
00:00:44,040 --> 00:00:48,720
be more for each iteration you would also expect the number of iterations to

8
00:00:48,720 --> 00:00:54,340
go up or you can you have to trade off between your discretization error and

9
00:00:54,340 --> 00:00:55,360
the error in the

10
00:00:55,360 --> 00:01:02,200
solution of the linear equation so is it possible to have the best in both

11
00:01:02,200 --> 00:01:09,320
worlds is it possible to both have the fast convergence in the linear solver in

12
00:01:09,320 --> 00:01:14,620
the iterative solver you would get for small n and also the accuracy you would

13
00:01:14,620 --> 00:01:25,300
get for bigger it turns out is quite possible the idea is the following

14
00:01:25,300 --> 00:01:25,340
okay so let's see if this is possible to get the solution of the linear equation

15
00:01:25,340 --> 00:01:31,660
What if you can have a method that uses multiple Ns?

16
00:01:32,460 --> 00:01:40,460
So one is a finer grid with a bigger N discretizing a PD that is more accurate

17
00:01:40,460 --> 00:01:47,900
and also a small N, you know the solution in your intuitive method would converge faster.

18
00:01:47,900 --> 00:02:05,060
Okay, and the smaller N would only be able to deal with the solution that can be represented on the coser grid.

19
00:02:07,060 --> 00:02:16,700
But that helps a lot because if you think of, so let me take an example of a Poisson's equation.

20
00:02:16,700 --> 00:02:17,700
Again.

21
00:02:17,900 --> 00:02:29,380
So for Poisson's equation, in 1b we know that this mode converges the slowest.

22
00:02:30,340 --> 00:02:36,580
The rate of convergence of this mode is proportional to n squared, right?

23
00:02:36,580 --> 00:02:38,180
So the iterations you need.

24
00:02:38,820 --> 00:02:44,420
But this mode is actually the easiest mode to represent on the very very coarse grid.

25
00:02:45,700 --> 00:02:47,860
This mode you can potentially

26
00:02:47,900 --> 00:02:51,380
only use three grid points to represent this mode.

27
00:02:52,020 --> 00:02:56,900
With three points, one, two intervals, the number of intervals equal to two.

28
00:02:58,180 --> 00:03:06,740
And with n equal to two, cosine of pi over n is something what?

29
00:03:11,220 --> 00:03:14,500
Is cosine of pi over two is what?

30
00:03:17,900 --> 00:03:18,900
Zero.

31
00:03:18,900 --> 00:03:19,900
Zero.

32
00:03:19,900 --> 00:03:20,940
Right.

33
00:03:20,940 --> 00:03:23,620
So for the eigenvalue equal to zero, what does it mean?

34
00:03:23,620 --> 00:03:24,620
One.

35
00:03:24,620 --> 00:03:27,940
We converged in one iteration.

36
00:03:27,940 --> 00:03:29,180
Exactly.

37
00:03:29,180 --> 00:03:39,980
So the mode that is most difficult to deal with in a very fine grid is something actually

38
00:03:39,980 --> 00:03:43,020
that is easiest to tackle in a coarse grid.

39
00:03:43,020 --> 00:03:44,020
Right.

40
00:03:44,020 --> 00:03:46,060
Because the mode is very smooth.

41
00:03:46,060 --> 00:03:47,060
And can be potentially very difficult to deal with.

42
00:03:47,060 --> 00:03:47,780
Right.

43
00:03:47,900 --> 00:03:52,500
represented on the very coarse grid and converges in one iteration.

44
00:03:54,560 --> 00:04:03,020
And of course we also have modes that are cosine 2 pi over n, 3 pi over n, etc.

45
00:04:03,360 --> 00:04:07,140
These won't be able to be represented on the n equal to 2 grid.

46
00:04:07,620 --> 00:04:15,140
But if you can design a series of grids, n equal to 2, n equal to 4, n equal to 8, etc.,

47
00:04:15,140 --> 00:04:19,360
all the way to our case where n equal to 1024,

48
00:04:20,780 --> 00:04:27,740
then for every single mode, there should be one of these grids

49
00:04:27,740 --> 00:04:32,840
that you can represent that mode with sufficient accuracy,

50
00:04:32,840 --> 00:04:39,020
and that mode would decrease pretty fast over that grid.

51
00:04:40,340 --> 00:04:43,680
So that's the idea of multigrid.

52
00:04:45,140 --> 00:04:51,460
And so how do we implement multigrid?

53
00:04:52,340 --> 00:04:57,540
So the multigrid is, we can represent the procedure as the following.

54
00:04:57,800 --> 00:05:00,020
So the x-axis is the algorithm,

55
00:05:04,020 --> 00:05:10,060
which means as we perform, as the computer performs subsequent operations,

56
00:05:10,280 --> 00:05:11,840
we are moving along the x-axis.

57
00:05:12,240 --> 00:05:14,100
The y-axis is the grid.

58
00:05:15,140 --> 00:05:16,400
And the y-axis is the grid.

59
00:05:16,400 --> 00:05:16,860
Okay.

60
00:05:17,480 --> 00:05:22,320
And if you go up, it's a finer grid.

61
00:05:23,180 --> 00:05:26,380
And going down is a coarser grid.

62
00:05:36,360 --> 00:05:40,580
So multigrid would always start with the finest grid.

63
00:05:41,020 --> 00:05:44,020
So the finest grid is where we discretize the equation

64
00:05:44,020 --> 00:05:45,120
because on that grid, we have a lot of grids.

65
00:05:45,120 --> 00:05:45,140
So we have a lot of grids.

66
00:05:45,140 --> 00:05:47,780
So on that grid, we can compute what the right-hand side is.

67
00:05:48,300 --> 00:05:51,220
On that grid, we have the matrix.

68
00:05:51,560 --> 00:05:52,460
We have the right-hand side.

69
00:05:53,260 --> 00:06:01,320
So on that grid, we compute the b minus ax that we call the residual.

70
00:06:02,600 --> 00:06:06,880
And we can think of all what we are doing in iterative method

71
00:06:06,880 --> 00:06:13,420
is to compute is going to have a successively better approximation to x

72
00:06:13,420 --> 00:06:15,120
in order to drive the result.

73
00:06:15,120 --> 00:06:17,020
So we can compute the residual r to zero.

74
00:06:17,020 --> 00:06:19,800
So this is our first approximation.

75
00:06:19,800 --> 00:06:27,500
And then what we are doing in the coarser grids

76
00:06:27,500 --> 00:06:35,120
is to solve for the correction.

77
00:06:35,120 --> 00:06:36,660
So what is the correction?

78
00:06:36,660 --> 00:06:45,100
So for delta x such that a times delta x is equal to a times delta x.

79
00:06:45,100 --> 00:06:46,100
So if we can solve for the correction,

80
00:06:46,100 --> 00:06:47,100
what we can do is we can solve for a times delta x

81
00:06:47,100 --> 00:06:48,100
would be equal to this r.

82
00:06:48,100 --> 00:06:49,100
Let me see if that's the case.

83
00:06:49,100 --> 00:06:50,100
Yes, would be equal to r.

84
00:06:50,100 --> 00:06:57,360
So if we can solve a times delta x equal to r,

85
00:06:57,360 --> 00:07:07,460
then my x zero because I know that my a times x zero

86
00:07:07,460 --> 00:07:11,600
would equal to b minus r, right?

87
00:07:11,600 --> 00:07:12,600
So this is a rearrangement.

88
00:07:12,600 --> 00:07:13,600
So here's the B minus r.

89
00:07:13,600 --> 00:07:14,600
So this is actually a B minus r.

90
00:07:14,600 --> 00:07:15,000
So this is a B minus r.

91
00:07:15,000 --> 00:07:29,780
of the definition of R so let's see then a times X 0 plus Delta X 0 the

92
00:07:29,780 --> 00:07:41,000
correction would be equal to B does that make sense so instead of solving

93
00:07:41,000 --> 00:07:47,600
directly for X we can solve this correction equation a times Delta X

94
00:07:47,600 --> 00:07:56,300
equal to R where R is the residual of my best guess yet and if we can exactly

95
00:07:56,300 --> 00:08:03,320
solve the correction equation we get the exact solution and but even if we can

96
00:08:03,320 --> 00:08:08,120
approximately solve this correction equation we get a better approximation

97
00:08:08,120 --> 00:08:11,000
to the solution by adding the original solution

98
00:08:11,000 --> 00:08:17,620
with my Delta X and why are we doing this in multi-grid we are doing this in

99
00:08:17,620 --> 00:08:24,940
multi-grid because as we go to causal grids we no longer have an as good

100
00:08:24,940 --> 00:08:30,520
approximation to the differential equation as in the final grid and what

101
00:08:30,520 --> 00:08:35,300
we want is that if on the final grid we already have a very good solution which

102
00:08:35,300 --> 00:08:40,480
we hope is true as we move towards the right-hand side of the algorithm

103
00:08:40,480 --> 00:08:40,980
you

104
00:08:41,000 --> 00:08:45,320
if we already have a good solution we don't want to spoil it in the in the

105
00:08:45,320 --> 00:08:52,640
course grid right therefore we want to solve this correction equation because

106
00:08:52,640 --> 00:08:58,920
if we already have a very good solution that R should be very small and the

107
00:08:58,920 --> 00:09:04,020
resulting Delta X would always hopefully give an improvement to the solution

108
00:09:04,020 --> 00:09:09,640
instead of the other way if we keep solving the original equation on the

109
00:09:09,640 --> 00:09:10,740
coarse grid then you'll be able to solve this equation without making a big change to the solution.

110
00:09:11,000 --> 00:09:17,240
the cross grid would always have a mismatch with the final grid and that's something we don't want

111
00:09:17,240 --> 00:09:22,600
we always want the cost of grades to improve upon the best solution we have on the final grid

112
00:09:22,600 --> 00:09:25,720
we want the whole solution to converge the solution of the final grid

113
00:09:26,680 --> 00:09:33,320
so when we go to the cross grid we want to interpolate we first want to interpolate

114
00:09:33,320 --> 00:09:41,720
the residual r0 to cost grid

115
00:09:45,960 --> 00:09:53,560
once we interpolated r0 now my r0 is on the cost grid then i solve my delta x 0

116
00:09:55,800 --> 00:10:00,840
is equal to is approximately equal to a inverse

117
00:10:03,320 --> 00:10:12,200
times r0 and how do we do this approximation we can perform a few jacobi iterations or a few

118
00:10:12,200 --> 00:10:18,840
a few gauss-seidel iterations remember on the cost of grids the moles that we can represent

119
00:10:18,840 --> 00:10:24,840
on the closer grid would always converge faster than how they would converge in the fine grid

120
00:10:27,240 --> 00:10:33,080
okay so once we solved this we can now

121
00:10:33,320 --> 00:10:44,840
go back and interpolate the delta x 0 to fine grid

122
00:10:46,760 --> 00:10:53,320
so this is a two grid algorithm we have one fine grid one cross grid we are going to generalize to

123
00:10:53,320 --> 00:11:03,080
a multi-grid pretty soon and then we perform x 1 would be equal to x 0 plus that delta x 0

124
00:11:03,320 --> 00:11:06,520
of zero coming from the cost grid

125
00:11:10,280 --> 00:11:18,200
okay and now we are going to do this again but before we do this this again we want to perform

126
00:11:18,200 --> 00:11:24,840
a few other iterations on the fine grid and what is the purpose of of performing a few

127
00:11:25,480 --> 00:11:32,840
jacobi or gauss-seidel iterations on the on the fine grid the purpose is to get the residual

128
00:11:33,880 --> 00:11:41,720
to be at a good enough state to be smooth enough so that the residual can be interpolated

129
00:11:42,280 --> 00:11:56,680
to the cost grid all right okay so so here we move towards uh uh iterations on fine grid

130
00:11:59,640 --> 00:12:03,240
and then go back again so so we go back and

131
00:12:03,320 --> 00:12:08,920
compute the residual and interpolate the residual to the cross grid and perform iterations on the

132
00:12:08,920 --> 00:12:12,360
on the cross grid and interpolate the correction back to the fine grid

133
00:12:14,600 --> 00:12:25,320
okay so so the two so the uh so the ingredients that are important is one computing

134
00:12:27,320 --> 00:12:33,160
residual so that's over here and the interpolating

135
00:12:33,320 --> 00:12:40,280
residual to the cost of grids

136
00:12:44,680 --> 00:12:47,080
and the three is uh

137
00:12:51,720 --> 00:13:01,560
is uh iteration iterative solver on both course

138
00:13:01,560 --> 00:13:03,160
and course and

139
00:13:03,320 --> 00:13:03,880
fine grid

140
00:13:07,320 --> 00:13:10,600
and four is interpolating

141
00:13:13,400 --> 00:13:15,160
not the residual but the solution

142
00:13:17,400 --> 00:13:18,280
to find a grid

143
00:13:20,760 --> 00:13:27,800
so once we have all these four components we can put together a multi-grid solver all right

144
00:13:31,000 --> 00:13:31,480
any questions so far on this uh overall uh oh any other uh if there's any other uh questions that I have as well?

145
00:13:31,480 --> 00:13:31,720
I think that's it for this video, I hope you have a good one and I hope to see you in the next one.

146
00:13:31,720 --> 00:13:32,220
So thanks for watching and I will see you in the next video.

147
00:13:32,220 --> 00:13:32,840
Thank you all and have a nice day.

148
00:13:33,320 --> 00:13:55,340
idea yes oh yes actually if you can design the grid so that you don't need

149
00:13:55,340 --> 00:13:59,360
interpolation that will be great so then the interpolation is a trivial

150
00:13:59,360 --> 00:14:06,860
interpolation that's right just picking the values right

