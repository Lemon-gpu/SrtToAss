1
00:00:00,000 --> 00:00:04,220
Okay, so yesterday we worked on the multi-grid algorithm.

2
00:00:04,660 --> 00:00:13,720
So the algorithm started with computing the residual of the matrix.

3
00:00:14,280 --> 00:00:19,540
So let's go back to the code we wrote by the end of our last lecture.

4
00:00:20,300 --> 00:00:26,700
So what the first part is doing is to compute the residual of the matrix.

5
00:00:26,700 --> 00:00:34,820
We initialized R to be a zero vector, and for every grid point we computed R to be the right-hand side,

6
00:00:35,420 --> 00:00:45,020
minus the action of the discretization on the vector u0.

7
00:00:46,960 --> 00:00:52,620
So this is the residual. This is b minus a times u0.

8
00:00:54,960 --> 00:00:56,620
So in fact...

9
00:00:56,700 --> 00:01:00,940
I'd like to actually put this into a function.

10
00:01:02,460 --> 00:01:08,720
So if we put this into a function called residual,

11
00:01:11,520 --> 00:01:15,600
that'll make the code a bit cleaner.

12
00:01:15,840 --> 00:01:20,560
So the residual takes a u0 and b, and it should return a R.

13
00:01:21,560 --> 00:01:25,360
And we can move this part.

14
00:01:26,700 --> 00:01:31,260
The whole part into the residual function.

15
00:01:35,720 --> 00:01:38,100
Right, so that computes the residual.

16
00:01:38,640 --> 00:01:46,760
And we can call this R is going to be equal to residual u0 and b.

17
00:01:47,920 --> 00:01:55,000
Right, so the first step of the multi-grid is to compute the residual.

18
00:01:56,700 --> 00:02:03,460
And usually in a regular multi-grid, there is a...

19
00:02:03,460 --> 00:02:10,520
Before computing the residual, we usually perform a few iterations to pre-smooth the solution.

20
00:02:10,520 --> 00:02:16,740
We are going to talk about why do we need to pre-smooth the solution in the general setting.

21
00:02:16,740 --> 00:02:19,740
Last lecture we didn't pre-smooth the solution.

22
00:02:19,740 --> 00:02:20,740
The multi-grid worked.

23
00:02:20,740 --> 00:02:25,820
But let's add this into the multi-grid to perform a few pre-smoothing.

24
00:02:25,820 --> 00:02:26,520
And the pre-smoothing is a very important part of the solution.

25
00:02:26,520 --> 00:02:31,340
So pre-smoothing is the same as what we performed here.

26
00:02:31,340 --> 00:02:35,880
So basically perform a few Gauss-Seidel iterations.

27
00:02:35,880 --> 00:02:39,700
Okay, before we compute the residual.

28
00:02:39,700 --> 00:02:49,200
So that is, we are going to take u0 and perform a few Gauss-Seidel iterations.

29
00:02:49,200 --> 00:02:52,820
And I'll call this pre-smoothing.

30
00:02:52,820 --> 00:02:56,400
And then after pre-smoothing, we compute the residual.

31
00:02:56,520 --> 00:03:00,040
Okay, I don't need any comments here.

32
00:03:00,040 --> 00:03:05,880
And then we interpolate the residual to the cost grid.

33
00:03:05,880 --> 00:03:08,020
So because we made a...

34
00:03:08,020 --> 00:03:13,700
Let's make it 5 and 5 to keep the computation cost exactly the same as before.

35
00:03:13,700 --> 00:03:14,700
All right.

36
00:03:14,700 --> 00:03:15,700
Okay.

37
00:03:15,700 --> 00:03:18,880
After we interpolate...

38
00:03:18,880 --> 00:03:19,880
So this is the...

39
00:03:19,880 --> 00:03:25,240
These two lines, line 10 and 11, are interpolation of R to the cost grid.

40
00:03:25,240 --> 00:03:26,240
In this case...

41
00:03:26,520 --> 00:03:32,520
The cost grid actually has grid points that lies exactly on every other grid point of

42
00:03:32,520 --> 00:03:33,520
the fine grid.

43
00:03:33,520 --> 00:03:36,660
Therefore, the interpolation is a trivial interpolation.

44
00:03:36,660 --> 00:03:41,460
We just take the value at these grid points.

45
00:03:41,460 --> 00:03:42,460
And then...

46
00:03:42,460 --> 00:03:46,460
Not perform iterations.

47
00:03:46,460 --> 00:03:47,460
Iterations.

48
00:03:47,460 --> 00:03:51,160
Then we perform iterations on the cost grid.

49
00:03:51,160 --> 00:03:52,420
So this is...

50
00:03:52,420 --> 00:03:54,760
We performed smoothing on the fine grid.

51
00:03:54,760 --> 00:03:56,520
We computed the residual.

52
00:03:56,520 --> 00:03:59,420
We interpolated the residual onto the cost grid.

53
00:03:59,420 --> 00:04:01,320
In multi-grid, this is...

54
00:04:01,320 --> 00:04:02,920
This has a special name.

55
00:04:02,920 --> 00:04:03,920
Going...

56
00:04:03,920 --> 00:04:07,920
Interpolating the residual from the cost grid to fine grid...

57
00:04:07,920 --> 00:04:10,920
From fine grid to cost grid is called restriction.

58
00:04:10,920 --> 00:04:14,760
So this restriction operator is actually...

59
00:04:14,760 --> 00:04:18,520
This is interpolation.

60
00:04:18,520 --> 00:04:21,800
Okay.

61
00:04:21,800 --> 00:04:23,520
And now we are at the cost grid.

62
00:04:23,520 --> 00:04:24,520
At the cost grid...

63
00:04:24,520 --> 00:04:25,520
At the next cost grid...

64
00:04:25,520 --> 00:04:26,520
At the next cost grid...

65
00:04:26,520 --> 00:04:29,420
We perform another smoothing operation.

66
00:04:29,420 --> 00:04:30,420
Right?

67
00:04:30,420 --> 00:04:33,420
So this is when this didn't happen.

68
00:04:33,420 --> 00:04:40,280
This is when we are at the cost grid.

69
00:04:40,280 --> 00:04:43,220
Then we perform Gauss-Seidel iterations.

70
00:04:43,220 --> 00:04:49,980
But otherwise, we go into another multi-grid call.

71
00:04:49,980 --> 00:04:53,320
And the other multi-grid call, we go back to here.

72
00:04:53,320 --> 00:04:55,320
And we would be performing the pre-smoothing again.

73
00:04:55,320 --> 00:04:56,320
Okay.

74
00:04:56,320 --> 00:04:57,320
Right?

75
00:04:57,320 --> 00:05:06,220
So let's actually make a few breakpoints on this.

76
00:05:06,220 --> 00:05:08,220
And we'll take a look at...

77
00:05:08,220 --> 00:05:12,220
So we'll make a breakpoint before the pre-smoothing.

78
00:05:12,220 --> 00:05:15,220
After the pre-smoothing.

79
00:05:15,220 --> 00:05:16,220
Okay.

80
00:05:16,220 --> 00:05:20,220
And then after we compute...

81
00:05:20,220 --> 00:05:23,220
After we go into the cost grid.

82
00:05:23,220 --> 00:05:25,220
And we'll come over here.

83
00:05:25,220 --> 00:05:27,620
The interpolation...

84
00:05:27,620 --> 00:05:29,020
Before the interpolation.

85
00:05:29,020 --> 00:05:34,120
After the interpolation.

86
00:05:34,120 --> 00:05:38,120
And after the post-smoothing.

87
00:05:38,120 --> 00:05:39,120
Alright.

88
00:05:39,120 --> 00:05:40,120
So we will make a few breakpoints.

89
00:05:40,120 --> 00:05:46,120
And we will step through the multi-grid algorithm to see how it works.

90
00:05:46,120 --> 00:05:52,120
So again, we are going to load the same B matrix we loaded in our last lecture.

91
00:05:52,120 --> 00:05:54,120
So B is going to be here.

92
00:05:54,120 --> 00:05:58,620
Here we are going to make u equal to zeros the size of b.

93
00:05:59,620 --> 00:06:01,740
Okay, and let's start.

94
00:06:02,020 --> 00:06:05,260
So u is equal to multi-grid of u and b.

95
00:06:09,880 --> 00:06:12,040
So the breakpoints didn't work.

96
00:06:16,760 --> 00:06:19,320
Oh, okay, so I think I opened the wrong file.

97
00:06:20,080 --> 00:06:20,920
Let me see.

98
00:06:21,100 --> 00:06:22,440
Let me save this.

99
00:06:24,120 --> 00:06:26,900
I think I opened the file from the last lecture.

100
00:06:27,100 --> 00:06:29,900
So let's save it to the current lecture.

101
00:06:30,520 --> 00:06:32,380
Okay, replace it.

102
00:06:33,760 --> 00:06:36,440
Okay, so let me make the breakpoints again.

103
00:06:37,380 --> 00:06:41,100
Before pre-smoothing, after pre-smoothing,

104
00:06:41,780 --> 00:06:43,640
and after interpolation,

105
00:06:44,600 --> 00:06:46,640
after the coarse-grid solution,

106
00:06:53,000 --> 00:06:53,560
and

107
00:06:53,560 --> 00:06:53,640
after

108
00:06:54,120 --> 00:06:56,120
interpolating to the fine-grid,

109
00:06:56,120 --> 00:06:58,120
and at the end of the iteration.

110
00:06:58,120 --> 00:07:01,800
Okay, so let's make u equal to the zeros again,

111
00:07:01,800 --> 00:07:03,800
and do our multi-grid.

112
00:07:03,800 --> 00:07:06,800
So this is in the beginning of the multi-grid,

113
00:07:06,800 --> 00:07:10,120
and our u0 should be completely zero.

114
00:07:10,120 --> 00:07:13,120
So if I do imshow of u0,

115
00:07:13,120 --> 00:07:17,120
I get a blank black image.

116
00:07:17,120 --> 00:07:19,120
So this is my initial guess.

117
00:07:20,120 --> 00:07:23,120
Now let me continue.

118
00:07:23,120 --> 00:07:24,120
So,

119
00:07:24,120 --> 00:07:27,120
we performed a few pre-smoothing operations,

120
00:07:27,120 --> 00:07:28,120
only five, right?

121
00:07:28,120 --> 00:07:31,120
So now, when I perform imshow,

122
00:07:31,120 --> 00:07:33,120
what am I expected to get?

123
00:07:35,120 --> 00:07:36,120
I get,

124
00:07:36,120 --> 00:07:41,120
do you see a very faint white lines appearing on the screen?

125
00:07:42,120 --> 00:07:43,120
Right?

126
00:07:43,120 --> 00:07:45,120
So, what this does,

127
00:07:45,120 --> 00:07:48,120
the five iterations of Gauss-Seidel,

128
00:07:49,120 --> 00:07:51,120
has smoothed,

129
00:07:52,120 --> 00:07:53,120
not the solution a little bit,

130
00:07:53,120 --> 00:07:55,120
but the solution error a little bit.

131
00:07:55,120 --> 00:07:56,120
Right?

132
00:07:56,120 --> 00:07:59,120
So this is the effect of the smoothing.

133
00:07:59,120 --> 00:08:04,120
It reduces the solution error a little bit,

134
00:08:04,120 --> 00:08:09,120
and especially it reduces the high-frequency content of the solution error.

135
00:08:09,120 --> 00:08:13,120
Remember, the solution error is the difference between the true solution

136
00:08:13,120 --> 00:08:16,120
and the solution we are getting right now.

137
00:08:16,120 --> 00:08:19,120
And therefore, by reducing the very smooth,

138
00:08:19,120 --> 00:08:22,120
by smoothing the solution error a little bit,

139
00:08:22,120 --> 00:08:24,120
what I'm doing is,

140
00:08:24,120 --> 00:08:31,120
the very sharp content of the solution is going to appear on my screen.

141
00:08:31,120 --> 00:08:32,120
Right?

142
00:08:32,120 --> 00:08:33,120
Okay.

143
00:08:33,120 --> 00:08:37,120
So, now my solution error is a little bit smoother.

144
00:08:37,120 --> 00:08:40,120
That also, in this context,

145
00:08:40,120 --> 00:08:43,120
means the residual is a bit smoother.

146
00:08:43,120 --> 00:08:45,120
So, what I can do is,

147
00:08:45,120 --> 00:08:48,120
I can then compute the residual and,

148
00:08:48,120 --> 00:08:50,120
and interpret it.

149
00:08:50,120 --> 00:08:55,120
And interpolate the residual to my Gauss grid.

150
00:08:55,120 --> 00:08:58,120
So, come over here.

151
00:08:58,120 --> 00:09:01,120
My residual is now on my Gauss grid.

152
00:09:01,120 --> 00:09:02,120
Right?

153
00:09:02,120 --> 00:09:04,120
And then, if I continue,

154
00:09:04,120 --> 00:09:06,120
what am I going to be at,

155
00:09:06,120 --> 00:09:08,120
at the next time?

156
00:09:08,120 --> 00:09:10,120
Which line am I going to be?

157
00:09:10,120 --> 00:09:13,120
If I click continue,

158
00:09:15,120 --> 00:09:18,120
am I going to be at line 22?

159
00:09:18,120 --> 00:09:20,120
I'm going to be at line 3,

160
00:09:20,120 --> 00:09:23,120
because I will be calling multigrid again, exactly.

161
00:09:23,120 --> 00:09:26,120
So, next time, I'm at line 3 again.

162
00:09:26,120 --> 00:09:27,120
Okay?

163
00:09:27,120 --> 00:09:30,120
And let's look at what is my U0.

164
00:09:30,120 --> 00:09:35,120
What do you think is my U0 in this case?

165
00:09:35,120 --> 00:09:40,120
Is it going to be an interpolated solution of what I have here?

166
00:09:40,120 --> 00:09:41,120
No.

167
00:09:41,120 --> 00:09:42,120
It is 0.

168
00:09:42,120 --> 00:09:44,120
Because here, what I'm doing,

169
00:09:44,120 --> 00:09:46,120
is I'm solving the error equation.

170
00:09:46,120 --> 00:09:49,120
I'm trying to correct the solution,

171
00:09:49,120 --> 00:09:52,120
I had before, I had in my final grid.

172
00:09:52,120 --> 00:09:54,120
So, I computed my residual,

173
00:09:54,120 --> 00:09:55,120
and I started from 0,

174
00:09:55,120 --> 00:09:57,120
trying to solve the error equation

175
00:09:57,120 --> 00:10:00,120
of A times delta x,

176
00:10:00,120 --> 00:10:01,120
equal to the residual,

177
00:10:01,120 --> 00:10:03,120
and I started with 0.

178
00:10:03,120 --> 00:10:04,120
If you don't believe me,

179
00:10:04,120 --> 00:10:10,120
I am sure of U0 here

180
00:10:10,120 --> 00:10:12,120
is going to be completely black.

181
00:10:12,120 --> 00:10:13,120
It's a smaller image,

182
00:10:13,120 --> 00:10:15,120
and completely black.

183
00:10:15,120 --> 00:10:16,120
Right?

184
00:10:16,120 --> 00:10:17,120
Okay.

185
00:10:17,120 --> 00:10:18,120
So, now, if I perform a,

186
00:10:18,120 --> 00:10:19,120
a continue,

187
00:10:19,120 --> 00:10:23,120
and I finished doing 5 iterations of pre-smoothing,

188
00:10:23,120 --> 00:10:26,120
what I get is,

189
00:10:26,120 --> 00:10:28,120
again, very faint lines.

190
00:10:28,120 --> 00:10:29,120
Maybe you don't see it,

191
00:10:29,120 --> 00:10:31,120
but like, there is a very faint lines.

192
00:10:31,120 --> 00:10:34,120
Let me, let me multiply by 10.

193
00:10:34,120 --> 00:10:36,120
You may see a little better, right?

194
00:10:36,120 --> 00:10:37,120
So, it's a,

195
00:10:37,120 --> 00:10:39,120
you get the high frequency content of the solution,

196
00:10:39,120 --> 00:10:42,120
but on the coarser grid.

197
00:10:42,120 --> 00:10:44,120
Okay.

198
00:10:44,120 --> 00:10:47,120
Now, I computed the residual and interpolated again.

199
00:10:47,120 --> 00:10:48,120
Okay.

200
00:10:48,120 --> 00:10:49,120
So, now, I have to do the same thing

201
00:10:49,120 --> 00:10:51,120
to the even coarser grid.

202
00:10:51,120 --> 00:10:54,120
Next time, I'm going to be at 3 again

203
00:10:54,120 --> 00:10:56,120
on the even smaller grid.

204
00:10:56,120 --> 00:10:58,120
So, of course, my U0 is again going to be 0,

205
00:10:58,120 --> 00:11:00,120
because now I'm solving the error equation

206
00:11:00,120 --> 00:11:05,120
of the 500 by 500 grid, right?

207
00:11:05,120 --> 00:11:09,120
So, now, I am at 256 by 256 grid.

208
00:11:09,120 --> 00:11:12,120
Now, after the smoothing iterations,

209
00:11:12,120 --> 00:11:14,120
let me do IAMSHOW on this again.

210
00:11:14,120 --> 00:11:17,120
I get an even smaller image,

211
00:11:17,120 --> 00:11:20,120
and still these contours.

212
00:11:20,120 --> 00:11:24,120
But remember, these very sharp contours on the small image,

213
00:11:24,120 --> 00:11:28,120
when I go back and interpolate to the coarser grid,

214
00:11:28,120 --> 00:11:32,120
it'll be the smooth portion of the solution on the,

215
00:11:32,120 --> 00:11:34,120
so, go back to the finer grid,

216
00:11:34,120 --> 00:11:37,120
it'll be a smooth features on the finer grid.

217
00:11:37,120 --> 00:11:39,120
Right.

218
00:11:39,120 --> 00:11:40,120
Okay.

219
00:11:40,120 --> 00:11:42,120
So, keep going.

220
00:11:42,120 --> 00:11:45,120
Next step, I'm at an even coarser grid.

221
00:11:45,120 --> 00:11:46,120
Let me go this for a few seconds.

222
00:11:46,120 --> 00:11:49,120
Let me go this for a few steps.

223
00:11:49,120 --> 00:11:52,120
What is my N now?

224
00:11:52,120 --> 00:11:57,120
My N is now, I'm at 64 by 64.

225
00:11:57,120 --> 00:12:00,120
And if I keep going,

226
00:12:00,120 --> 00:12:05,120
I'm at 32 by 32.

227
00:12:05,120 --> 00:12:08,120
Keep going, I'm at 16 by 16.

228
00:12:08,120 --> 00:12:09,120
Okay.

229
00:12:09,120 --> 00:12:12,120
Here.

230
00:12:12,120 --> 00:12:14,120
And now,

231
00:12:14,120 --> 00:12:15,120
I'm at 8 by 8.

232
00:12:16,120 --> 00:12:22,120
So, here, if we look at the solution on the 8 by 8 grid,

233
00:12:22,120 --> 00:12:26,120
we get something that is,

234
00:12:26,120 --> 00:12:27,120
like that.

235
00:12:27,120 --> 00:12:30,120
So, it's very hard to,

236
00:12:30,120 --> 00:12:35,120
basically we get like almost the most smooth portion,

237
00:12:35,120 --> 00:12:36,120
like that.

238
00:12:36,120 --> 00:12:37,120
Right.

239
00:12:37,120 --> 00:12:39,120
So, we get the very smooth portion of the solution.

240
00:12:39,120 --> 00:12:44,120
And finally, when we,

241
00:12:44,120 --> 00:12:47,120
when we are at a coarser enough grid,

242
00:12:47,120 --> 00:12:49,120
I think we are at four,

243
00:12:49,120 --> 00:12:52,120
we are at four now.

244
00:12:52,120 --> 00:12:55,120
So, we'll still go through.

245
00:12:55,120 --> 00:12:56,120
Okay.

246
00:12:56,120 --> 00:12:58,120
So, when, so here, right.

247
00:12:58,120 --> 00:13:00,120
So, N on the finer grid,

248
00:13:00,120 --> 00:13:02,120
my size is equal to four on the coarser grid,

249
00:13:02,120 --> 00:13:03,120
it's even smaller.

250
00:13:03,120 --> 00:13:07,120
So, here, what I did is I performed a 10 Gauss-Seidel iterations

251
00:13:07,120 --> 00:13:09,120
on the coarser grid.

252
00:13:09,120 --> 00:13:11,120
And I come over to here.

253
00:13:11,120 --> 00:13:14,120
So, now, I'm interpolating my DU.

254
00:13:14,120 --> 00:13:16,120
To the finer grid.

255
00:13:16,120 --> 00:13:20,120
So, my DU,

256
00:13:20,120 --> 00:13:24,120
my DU here is,

257
00:13:24,120 --> 00:13:26,120
let me just type DU.

258
00:13:26,120 --> 00:13:29,120
So, my DU here is going to be a three by three matrix,

259
00:13:29,120 --> 00:13:31,120
three by three array.

260
00:13:31,120 --> 00:13:32,120
Right.

261
00:13:32,120 --> 00:13:33,120
So, the boundaries are zero.

262
00:13:33,120 --> 00:13:36,120
And this is the only solution I get.

263
00:13:36,120 --> 00:13:41,120
So, I'm basically solving a matrix equation with how many unknowns,

264
00:13:41,120 --> 00:13:43,120
in this case.

265
00:13:44,120 --> 00:13:47,120
With just a single unknown.

266
00:13:47,120 --> 00:13:48,120
Right.

267
00:13:48,120 --> 00:13:52,120
So, this is probably an exact solution after 10 Gauss-Seidel.

268
00:13:52,120 --> 00:13:54,120
I mean, this is, this must be an exact solution,

269
00:13:54,120 --> 00:13:56,120
even with one Gauss-Seidel iteration.

270
00:13:56,120 --> 00:14:02,120
Because I'm solving an equation with only one unknown.

271
00:14:02,120 --> 00:14:05,120
And then, I'm interpolating this to the finer grid.

272
00:14:05,120 --> 00:14:12,120
And adding the solution to the previous,

273
00:14:12,120 --> 00:14:14,120
previous solution after,

274
00:14:14,120 --> 00:14:16,120
after the pre-smooth.

275
00:14:16,120 --> 00:14:18,120
So, what I have gone is,

276
00:14:18,120 --> 00:14:20,120
I have gone through here.

277
00:14:20,120 --> 00:14:24,120
And sometimes, people use a direct solver on the Causs-Seidel grid.

278
00:14:24,120 --> 00:14:26,120
Because on the Causs-Seidel grid,

279
00:14:26,120 --> 00:14:31,120
the matrix is so small that usually a direct solver beats an iterative solver.

