1
00:00:00,000 --> 00:00:07,000
Okay, so let's show that back in our MATLAB script.

2
00:00:07,000 --> 00:00:15,000
So here let's make a new function called the multigrid.

3
00:00:15,000 --> 00:00:21,000
Sorry.

4
00:00:21,000 --> 00:00:25,000
Okay, thanks.

5
00:00:25,000 --> 00:00:35,000
So we are trying to make it the same way as we coded up the Jacobi and the Gauss-Seidel iterations.

6
00:00:35,000 --> 00:00:41,000
So the start is we are computing the residual, right?

7
00:00:41,000 --> 00:00:47,000
So the residual, first of all, is going to be...

8
00:00:47,000 --> 00:00:53,000
Let's actually first do the same thing to compute delta x again.

9
00:00:53,000 --> 00:00:55,000
So that's the same thing as what we did.

10
00:00:55,000 --> 00:01:03,000
And the residual is going to be...

11
00:01:03,000 --> 00:01:09,000
The residual of the Laplace equation.

12
00:01:09,000 --> 00:01:15,000
So the residual is going to be the b minus...

13
00:01:15,000 --> 00:01:18,000
Okay, so let's first make it equal to b.

14
00:01:18,000 --> 00:01:22,000
And for i goes from 2 to n interval.

15
00:01:22,000 --> 00:01:24,000
For j goes from 2 to n interval.

16
00:01:24,000 --> 00:01:25,000
Okay.

17
00:01:25,000 --> 00:01:35,000
So for the interval, we are going to say the residual ij is equal to residual...

18
00:01:35,000 --> 00:01:38,000
Let's make it clearer.

19
00:01:38,000 --> 00:01:42,000
Let's do zeros.

20
00:01:42,000 --> 00:01:44,000
Size of b.

21
00:01:44,000 --> 00:01:52,000
So rij would be equal to the right-hand side, which is bij, minus the Poisson's equation,

22
00:01:52,000 --> 00:01:54,000
which is u0.

23
00:01:54,000 --> 00:02:11,000
So we have u0 of i minus 1j plus u0 of i plus 1j plus u0 of ij minus 1 plus u0 of ij plus 1.

24
00:02:11,000 --> 00:02:21,000
We have to minus 4 times u0 ij divided by delta x squared.

25
00:02:21,000 --> 00:02:22,000
Right?

26
00:02:22,000 --> 00:02:30,000
So we have...

27
00:02:30,000 --> 00:02:35,000
We have the right-hand side minus the left-hand side of the Poisson's equation.

28
00:02:35,000 --> 00:02:41,000
So b minus the second-order derivative of u in both x and y directions.

29
00:02:41,000 --> 00:02:43,000
Right?

30
00:02:43,000 --> 00:02:45,000
Okay.

31
00:02:45,000 --> 00:02:49,000
So that is our residual calculation.

32
00:02:49,000 --> 00:02:51,000
And...

33
00:02:51,000 --> 00:02:59,000
Once we have the residual calculation, we want to interpolate this to a cos grid.

34
00:02:59,000 --> 00:03:05,000
Oh, no. Cos.

35
00:03:05,000 --> 00:03:10,000
So our interpolation to the cos grid would be something like that.

36
00:03:10,000 --> 00:03:13,000
So we should have R...

37
00:03:13,000 --> 00:03:17,000
Let's call it RC is equal to...

38
00:03:17,000 --> 00:03:20,000
Uh...

39
00:03:20,000 --> 00:03:23,000
I think we'll do exactly what you mentioned.

40
00:03:23,000 --> 00:03:30,000
We will make a cos grid that is exactly twice as cos as the fine grid.

41
00:03:30,000 --> 00:03:40,000
So it'll be zeros and interval divided by 2 plus 1.

42
00:03:40,000 --> 00:03:42,000
So I still need the boundary conditions.

43
00:03:42,000 --> 00:03:48,000
And the RC of 2, 2 and minus 1.

44
00:03:48,000 --> 00:03:50,000
2, 2 and minus 1.

45
00:03:50,000 --> 00:03:52,000
Would be a copy of my R.

46
00:03:52,000 --> 00:03:54,000
So...

47
00:03:54,000 --> 00:03:56,000
So let's see.

48
00:03:56,000 --> 00:03:58,000
How should I perform that copying?

49
00:03:58,000 --> 00:04:00,000
I have a fine grid.

50
00:04:00,000 --> 00:04:02,000
Like this.

51
00:04:02,000 --> 00:04:04,000
1, 2, 3, 4, 5, 6.

52
00:04:04,000 --> 00:04:07,000
And I want a cos grid that is twice as cos.

53
00:04:07,000 --> 00:04:09,000
So cos grid would be like that.

54
00:04:09,000 --> 00:04:12,000
So the cos grid starting from 95,

55
00:04:12,000 --> 00:04:14,000
and then the cos grid starting from 95,

56
00:04:14,000 --> 00:04:16,000
and then the cos grid starting from 95,

57
00:04:16,000 --> 00:04:22,000
so the cos grid starting from number 2 should be the fine grid starting from number 3.

58
00:04:22,000 --> 00:04:23,000
Right?

59
00:04:23,000 --> 00:04:29,000
So I should be 3, 2 and minus 2.

60
00:04:29,000 --> 00:04:33,000
3, 2 and minus 2.

61
00:04:33,000 --> 00:04:35,000
So the second number here is the...

62
00:04:35,000 --> 00:04:38,000
I'm gonna skip one.

63
00:04:38,000 --> 00:04:41,000
I'm taking every two values.

64
00:04:41,000 --> 00:04:42,000
Yes?

65
00:04:42,000 --> 00:04:44,000
Minus 2.

66
00:04:44,000 --> 00:04:45,000
Minus 2, yeah. Thank you.

67
00:04:46,000 --> 00:04:48,000
Okay.

68
00:04:48,000 --> 00:04:52,000
So now I have the interpolation to the cos grid.

69
00:04:52,000 --> 00:04:54,000
On the cos grid,

70
00:04:54,000 --> 00:04:56,000
I want to solve...

71
00:04:56,000 --> 00:05:01,000
perform iterations on the cos grid.

72
00:05:06,000 --> 00:05:12,000
So it's usually good just to perform a few iterations.

73
00:05:12,000 --> 00:05:14,000
So let's make a cos grid,

74
00:05:14,000 --> 00:05:15,000
dx,

75
00:05:15,000 --> 00:05:17,000
du.

76
00:05:17,000 --> 00:05:19,000
So that's the correction on u is...

77
00:05:19,000 --> 00:05:21,000
Let's do zeros.

78
00:05:21,000 --> 00:05:25,000
The size of RC.

79
00:05:25,000 --> 00:05:28,000
So we'll make initial guess equal to zeros.

80
00:05:28,000 --> 00:05:32,000
And let's do 10 iterations.

81
00:05:32,000 --> 00:05:35,000
And let's use the Gauss-Seidel iterations.

82
00:05:35,000 --> 00:05:41,000
So du is equal to Gauss-Seidel of du and my RC.

83
00:05:41,000 --> 00:05:43,000
Okay.

84
00:05:43,000 --> 00:05:44,000
Okay.

85
00:05:44,000 --> 00:05:46,000
And afterwards,

86
00:05:46,000 --> 00:05:51,000
I'm going to interpolate the du to fine grid.

87
00:05:51,000 --> 00:05:53,000
So here I want to interpolate R,

88
00:05:53,000 --> 00:05:55,000
the residual to the cos grid.

89
00:05:55,000 --> 00:05:56,000
Fine grid.

90
00:05:56,000 --> 00:05:59,000
So interpolating the correction to the fine grid.

91
00:06:01,000 --> 00:06:03,000
So duf,

92
00:06:03,000 --> 00:06:04,000
that's my fine grid,

93
00:06:04,000 --> 00:06:07,000
is equal to zeros,

94
00:06:07,000 --> 00:06:09,000
the size of B here.

95
00:06:11,000 --> 00:06:13,000
And here I really need interpolation.

96
00:06:13,000 --> 00:06:22,000
Because my cos grid is only a fraction of the grids I have on the fine grid.

97
00:06:22,000 --> 00:06:28,000
So duf does have some places where I don't need interpolation.

98
00:06:28,000 --> 00:06:33,000
So these are the same points where I can just copy the values from du.

99
00:06:33,000 --> 00:06:41,000
2 to n, 2 to n minus 1, 2 to n minus 1.

100
00:06:41,000 --> 00:06:42,000
Right.

101
00:06:42,000 --> 00:06:47,000
So these are the places I can perform my copying.

102
00:06:47,000 --> 00:06:49,000
And afterwards,

103
00:06:49,000 --> 00:06:54,000
I can just do a linear interpolation in both x and y directions.

104
00:06:54,000 --> 00:06:55,000
Okay.

105
00:06:55,000 --> 00:07:00,000
So first let's do a linear interpolation in the x direction.

106
00:07:00,000 --> 00:07:06,000
So that would be if I start from 2 to 2 to n minus 1.

107
00:07:06,000 --> 00:07:13,000
I still have the same values here.

108
00:07:13,000 --> 00:07:17,000
Would be equal to 0.5 times the average,

109
00:07:17,000 --> 00:07:21,000
that would be the average between the neighboring values.

110
00:07:21,000 --> 00:07:33,000
So would be the average between 1 to 2 to n minus 2,

111
00:07:33,000 --> 00:07:35,000
which is,

112
00:07:35,000 --> 00:07:39,000
includes both the boundary value 0 at r equal to 1,

113
00:07:39,000 --> 00:07:45,000
and all the other values I have already copied from the du on the cos grid.

114
00:07:50,000 --> 00:07:53,000
And plus

115
00:07:58,000 --> 00:08:04,000
my duf at now 3 to 2 to n.

116
00:08:05,000 --> 00:08:12,000
So this is my interpolation in the x direction.

117
00:08:12,000 --> 00:08:17,000
So now I have all the values at every i direction,

118
00:08:17,000 --> 00:08:18,000
at all the i directions,

119
00:08:18,000 --> 00:08:23,000
but at every other j direction I want to interpolate in the j direction.

120
00:08:23,000 --> 00:08:26,000
So duf,

121
00:08:26,000 --> 00:08:29,000
now every j direction is filled.

122
00:08:29,000 --> 00:08:34,000
2 to 2 to n minus 1 in the j direction is,

123
00:08:34,000 --> 00:08:36,000
I want to follow the same formula,

124
00:08:36,000 --> 00:08:38,000
duf,

125
00:08:38,000 --> 00:08:42,000
colon, 1 to 2 to n minus 2,

126
00:08:42,000 --> 00:08:43,000
plus duf,

127
00:08:43,000 --> 00:08:46,000
to 3 to 2 to n.

128
00:08:50,000 --> 00:08:54,000
Okay, so that completes my interpolation of du to the fine grid.

129
00:09:00,000 --> 00:09:03,000
Yes, yes, all the i directions, thanks.

130
00:09:04,000 --> 00:09:13,000
All right, so now I'm going to add a correction to the solution.

131
00:09:13,000 --> 00:09:20,000
So my u1 is going to be u0 plus duf.

132
00:09:20,000 --> 00:09:30,000
All right, and I want to do and perform iterations on the fine grid.

133
00:09:30,000 --> 00:09:36,000
So I'm going to for i goes from 1 to 10.

134
00:09:36,000 --> 00:09:39,000
I'm going to perform 10 iterations on the fine grid.

135
00:09:39,000 --> 00:09:44,000
u1 would be equal to gauss, seidel, u1 and my du.

136
00:09:44,000 --> 00:09:50,000
All right, so that completes my multi-grid,

137
00:09:50,000 --> 00:09:52,000
I mean two-grid solution.

138
00:09:52,000 --> 00:09:56,000
All right, so let's try it.

139
00:09:56,000 --> 00:09:59,000
If we see,

140
00:09:59,000 --> 00:10:03,000
we have our, let's again make u equal to u0.

141
00:10:03,000 --> 00:10:09,000
And previously we performed 100 iterations of gauss, seidel,

142
00:10:09,000 --> 00:10:11,000
and we saw what we had, right?

143
00:10:11,000 --> 00:10:16,000
So in here, because we have 20 iterations on the coarse grid,

144
00:10:16,000 --> 00:10:18,000
20 iterations on the fine grid.

145
00:10:18,000 --> 00:10:20,000
So let's only do 5 iterations.

146
00:10:23,000 --> 00:10:28,000
Let's say u is equal to multi-grid of u and b.

147
00:10:29,000 --> 00:10:34,000
Okay, now I get my u.

148
00:10:34,000 --> 00:10:39,000
Let's look at what u looks like here.

149
00:10:39,000 --> 00:10:45,000
Okay, so do you see some difference between the solution I get

150
00:10:45,000 --> 00:10:47,000
with 100 gauss, seidel iterations

151
00:10:47,000 --> 00:10:52,000
and what I get through 5 iterations of multi-grid?

152
00:10:52,000 --> 00:10:55,000
Let's actually make another image and compare.

153
00:10:55,000 --> 00:10:57,000
Figure u is equal to u0.

154
00:10:57,000 --> 00:10:59,000
u is equal to u0.

155
00:10:59,000 --> 00:11:02,000
And the 4i goes from,

156
00:11:02,000 --> 00:11:06,000
let's just copy the code I think I had before.

157
00:11:14,000 --> 00:11:19,000
Title gauss, seidel, 100 iterations.

158
00:11:23,000 --> 00:11:26,000
So this is gauss, seidel after 100 iterations.

159
00:11:26,000 --> 00:11:29,000
This is my multi-grid after 5 iterations,

160
00:11:29,000 --> 00:11:34,000
which includes 50 coarse-grid iterations and 50 fine-grid iterations.

161
00:11:37,000 --> 00:11:39,000
Do you see some difference or not?

162
00:11:40,000 --> 00:11:41,000
Yes.

163
00:11:41,000 --> 00:11:45,000
So the gauss, seidel iterations looks very,

164
00:11:45,000 --> 00:11:47,000
only has very fine lines,

165
00:11:47,000 --> 00:11:53,000
and the multi-grid has a lot more smoothness, right?

166
00:11:53,000 --> 00:11:55,000
It has a lot more lower frequency content in it.

167
00:11:55,000 --> 00:12:01,000
That probably means that there are some lower frequency content

168
00:12:01,000 --> 00:12:05,000
in the solution that starts to converge faster in the multi-grid

169
00:12:05,000 --> 00:12:07,000
than in the gauss, seidel, right?

