1
00:00:00,000 --> 00:00:02,500
How costly is multigrid?

2
00:00:04,440 --> 00:00:10,020
And here, we are going to look at one-dimensional, two-dimensional, and three-dimensional problems.

3
00:00:10,640 --> 00:00:15,280
So, this is the multigrid cycle we have performed.

4
00:00:16,780 --> 00:00:19,860
We perform a smoothing on the fine grid.

5
00:00:20,960 --> 00:00:26,240
So, let's say the cost is proportional on a one-dimensional grid.

6
00:00:26,240 --> 00:00:30,020
And this is proportional to n, right?

7
00:00:30,100 --> 00:00:33,780
So, let's say alpha n is the pre-smoothing on the fine grid.

8
00:00:34,680 --> 00:00:40,040
And interpolation cost is very similar to the smoothing iterations.

9
00:00:40,540 --> 00:00:43,140
It's basically proportional to the number of grid points.

10
00:00:43,820 --> 00:00:48,680
And this is proportional to n over 2 for a one-dimensional grid.

11
00:00:48,800 --> 00:00:50,840
This is proportional to n over 4.

12
00:00:51,100 --> 00:00:53,220
And this is proportional to n over 8.

13
00:00:53,220 --> 00:00:56,220
And coming back, this is also n.

14
00:00:56,500 --> 00:01:01,000
n over 4, n over 2, and n, right?

15
00:01:01,120 --> 00:01:08,820
So, one multigrid cycle is going to have a cost of a constant times n,

16
00:01:09,540 --> 00:01:17,800
plus half n, plus a fourth n, plus n over 8.

17
00:01:17,800 --> 00:01:22,720
If you have more grids, it will be n over 16, etc., etc.

18
00:01:24,020 --> 00:01:26,020
If you add all these up,

19
00:01:27,060 --> 00:01:30,400
and you want to approximate it by something,

20
00:01:30,620 --> 00:01:32,040
what would it look like?

21
00:01:35,060 --> 00:01:39,700
n of 1 plus half plus a fourth plus 8.

22
00:01:40,180 --> 00:01:41,780
Do you recognize this series?

23
00:01:43,580 --> 00:01:45,220
What's the summation of the series?

24
00:01:47,900 --> 00:01:49,180
About 2, right?

25
00:01:49,180 --> 00:01:54,420
So, that's approximately twice the cost

26
00:01:54,420 --> 00:01:56,180
of only doing...

27
00:01:56,240 --> 00:01:58,240
the fine-grid iterations.

28
00:01:58,240 --> 00:02:00,240
If you don't go to the cost grid,

29
00:02:00,240 --> 00:02:04,240
you just perform the iterations you would do on the fine-grid.

30
00:02:04,240 --> 00:02:09,240
You would be saving only half of the computation cost.

31
00:02:11,080 --> 00:02:17,080
And if we only do these 10 Jacobi or Gauss-Seidel iterations on the finest grid,

32
00:02:17,080 --> 00:02:21,080
you probably see the solution not converging at all.

33
00:02:21,080 --> 00:02:23,080
Like, you only get a few lines.

34
00:02:24,620 --> 00:02:25,120
So,

35
00:02:25,120 --> 00:02:26,020
so, that's the solution.

36
00:02:26,020 --> 00:02:28,020
So, that's not the whole story yet,

37
00:02:28,020 --> 00:02:32,020
if you look at it on the two-dimensional problem.

38
00:02:32,020 --> 00:02:34,020
So, this is 1b.

39
00:02:34,020 --> 00:02:38,020
On the two-dimensional problem, just like what we just solved.

40
00:02:38,020 --> 00:02:46,020
And imagine n is the total number of grid points on the finest grid.

41
00:02:46,020 --> 00:02:48,020
The series is different.

42
00:02:48,020 --> 00:02:50,020
So, this is still n.

43
00:02:50,020 --> 00:02:54,020
When you go to a cost grid, the grid is four times smaller.

44
00:02:54,020 --> 00:02:54,520
Right?

45
00:02:54,520 --> 00:02:55,020
So,

46
00:02:55,020 --> 00:02:59,020
n over 4 and n over 16, etc.

47
00:02:59,020 --> 00:03:08,020
So, what we would get in the 2D is 1 over 4, 1 over 16, plus etc.

48
00:03:10,020 --> 00:03:14,020
Well, it's n times 1 over 1 minus 1 fourth.

49
00:03:14,020 --> 00:03:18,020
So, that's about 4 over 3 times n.

50
00:03:18,020 --> 00:03:23,020
So, this is only a little bit more expensive than doing this thing,

51
00:03:23,020 --> 00:03:26,020
doing only the fine grid operations.

52
00:03:26,020 --> 00:03:27,020
Right?

53
00:03:27,020 --> 00:03:28,020
Okay.

54
00:03:28,020 --> 00:03:36,020
So, furthermore, as you can imagine, if I go to 3D, that'll be even more cheaper.

55
00:03:36,020 --> 00:03:40,020
So, the next grid is an eighth as expensive.

56
00:03:40,020 --> 00:03:44,020
And the next one is 64 as expensive.

57
00:03:44,020 --> 00:03:47,020
And this is going to be 1 minus eighth.

58
00:03:47,020 --> 00:03:51,020
And that'll be 8 over 7 times n.

59
00:03:51,020 --> 00:03:52,020
So, again, a little bit more expensive.

60
00:03:53,020 --> 00:03:57,020
More expensive than doing this only on the fine grid.

