[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: None
PlayResX: 1080
PlayResY: 720

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: 辉英,Tahoma,35,&H00FFFFFF,&H000000FF,&H003B3C3D,&H00000000,0,0,0,0,70,70,1,0,1,1.3,0.2,2,0,0,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,00:00:00.000,00:00:05.820,辉英,,0,0,0,,if you are if you're using any discretization method you know that more
Dialogue: 0,00:00:05.820,00:00:12.360,辉英,,0,0,0,,and you have the more accurate the solution is but this tells you the
Dialogue: 0,00:00:12.360,00:00:17.460,辉英,,0,0,0,,bigger the n is the slower if you have to use it with method the slower the
Dialogue: 0,00:00:17.460,00:00:25.380,辉英,,0,0,0,,solution is going to converge so there is a trade-off that okay if you have
Dialogue: 0,00:00:25.380,00:00:36.960,辉英,,0,0,0,,finite amount of computation time you may you can you have to balance if you
Dialogue: 0,00:00:36.960,00:00:44.040,辉英,,0,0,0,,increase n you should not only expect your solution your calculations to be to
Dialogue: 0,00:00:44.040,00:00:48.720,辉英,,0,0,0,,be more for each iteration you would also expect the number of iterations to
Dialogue: 0,00:00:48.720,00:00:54.340,辉英,,0,0,0,,go up or you can you have to trade off between your discretization error and
Dialogue: 0,00:00:54.340,00:00:55.360,辉英,,0,0,0,,the error in the
Dialogue: 0,00:00:55.360,00:01:02.200,辉英,,0,0,0,,solution of the linear equation so is it possible to have the best in both
Dialogue: 0,00:01:02.200,00:01:09.320,辉英,,0,0,0,,worlds is it possible to both have the fast convergence in the linear solver in
Dialogue: 0,00:01:09.320,00:01:14.620,辉英,,0,0,0,,the iterative solver you would get for small n and also the accuracy you would
Dialogue: 0,00:01:14.620,00:01:25.300,辉英,,0,0,0,,get for bigger it turns out is quite possible the idea is the following
Dialogue: 0,00:01:25.300,00:01:25.340,辉英,,0,0,0,,okay so let's see if this is possible to get the solution of the linear equation
Dialogue: 0,00:01:25.340,00:01:31.660,辉英,,0,0,0,,What if you can have a method that uses multiple Ns?
Dialogue: 0,00:01:32.460,00:01:40.460,辉英,,0,0,0,,So one is a finer grid with a bigger N discretizing a PD that is more accurate
Dialogue: 0,00:01:40.460,00:01:47.900,辉英,,0,0,0,,and also a small N, you know the solution in your intuitive method would converge faster.
Dialogue: 0,00:01:47.900,00:02:05.060,辉英,,0,0,0,,Okay, and the smaller N would only be able to deal with the solution that can be represented on the coser grid.
Dialogue: 0,00:02:07.060,00:02:16.700,辉英,,0,0,0,,But that helps a lot because if you think of, so let me take an example of a Poisson's equation.
Dialogue: 0,00:02:16.700,00:02:17.700,辉英,,0,0,0,,Again.
Dialogue: 0,00:02:17.900,00:02:29.380,辉英,,0,0,0,,So for Poisson's equation, in 1b we know that this mode converges the slowest.
Dialogue: 0,00:02:30.340,00:02:36.580,辉英,,0,0,0,,The rate of convergence of this mode is proportional to n squared, right?
Dialogue: 0,00:02:36.580,00:02:38.180,辉英,,0,0,0,,So the iterations you need.
Dialogue: 0,00:02:38.820,00:02:44.420,辉英,,0,0,0,,But this mode is actually the easiest mode to represent on the very very coarse grid.
Dialogue: 0,00:02:45.700,00:02:47.860,辉英,,0,0,0,,This mode you can potentially
Dialogue: 0,00:02:47.900,00:02:51.380,辉英,,0,0,0,,only use three grid points to represent this mode.
Dialogue: 0,00:02:52.020,00:02:56.900,辉英,,0,0,0,,With three points, one, two intervals, the number of intervals equal to two.
Dialogue: 0,00:02:58.180,00:03:06.740,辉英,,0,0,0,,And with n equal to two, cosine of pi over n is something what?
Dialogue: 0,00:03:11.220,00:03:14.500,辉英,,0,0,0,,Is cosine of pi over two is what?
Dialogue: 0,00:03:17.900,00:03:18.900,辉英,,0,0,0,,Zero.
Dialogue: 0,00:03:18.900,00:03:19.900,辉英,,0,0,0,,Zero.
Dialogue: 0,00:03:19.900,00:03:20.940,辉英,,0,0,0,,Right.
Dialogue: 0,00:03:20.940,00:03:23.620,辉英,,0,0,0,,So for the eigenvalue equal to zero, what does it mean?
Dialogue: 0,00:03:23.620,00:03:24.620,辉英,,0,0,0,,One.
Dialogue: 0,00:03:24.620,00:03:27.940,辉英,,0,0,0,,We converged in one iteration.
Dialogue: 0,00:03:27.940,00:03:29.180,辉英,,0,0,0,,Exactly.
Dialogue: 0,00:03:29.180,00:03:39.980,辉英,,0,0,0,,So the mode that is most difficult to deal with in a very fine grid is something actually
Dialogue: 0,00:03:39.980,00:03:43.020,辉英,,0,0,0,,that is easiest to tackle in a coarse grid.
Dialogue: 0,00:03:43.020,00:03:44.020,辉英,,0,0,0,,Right.
Dialogue: 0,00:03:44.020,00:03:46.060,辉英,,0,0,0,,Because the mode is very smooth.
Dialogue: 0,00:03:46.060,00:03:47.060,辉英,,0,0,0,,And can be potentially very difficult to deal with.
Dialogue: 0,00:03:47.060,00:03:47.780,辉英,,0,0,0,,Right.
Dialogue: 0,00:03:47.900,00:03:52.500,辉英,,0,0,0,,represented on the very coarse grid and converges in one iteration.
Dialogue: 0,00:03:54.560,00:04:03.020,辉英,,0,0,0,,And of course we also have modes that are cosine 2 pi over n, 3 pi over n, etc.
Dialogue: 0,00:04:03.360,00:04:07.140,辉英,,0,0,0,,These won't be able to be represented on the n equal to 2 grid.
Dialogue: 0,00:04:07.620,00:04:15.140,辉英,,0,0,0,,But if you can design a series of grids, n equal to 2, n equal to 4, n equal to 8, etc.,
Dialogue: 0,00:04:15.140,00:04:19.360,辉英,,0,0,0,,all the way to our case where n equal to 1024,
Dialogue: 0,00:04:20.780,00:04:27.740,辉英,,0,0,0,,then for every single mode, there should be one of these grids
Dialogue: 0,00:04:27.740,00:04:32.840,辉英,,0,0,0,,that you can represent that mode with sufficient accuracy,
Dialogue: 0,00:04:32.840,00:04:39.020,辉英,,0,0,0,,and that mode would decrease pretty fast over that grid.
Dialogue: 0,00:04:40.340,00:04:43.680,辉英,,0,0,0,,So that's the idea of multigrid.
Dialogue: 0,00:04:45.140,00:04:51.460,辉英,,0,0,0,,And so how do we implement multigrid?
Dialogue: 0,00:04:52.340,00:04:57.540,辉英,,0,0,0,,So the multigrid is, we can represent the procedure as the following.
Dialogue: 0,00:04:57.800,00:05:00.020,辉英,,0,0,0,,So the x-axis is the algorithm,
Dialogue: 0,00:05:04.020,00:05:10.060,辉英,,0,0,0,,which means as we perform, as the computer performs subsequent operations,
Dialogue: 0,00:05:10.280,00:05:11.840,辉英,,0,0,0,,we are moving along the x-axis.
Dialogue: 0,00:05:12.240,00:05:14.100,辉英,,0,0,0,,The y-axis is the grid.
Dialogue: 0,00:05:15.140,00:05:16.400,辉英,,0,0,0,,And the y-axis is the grid.
Dialogue: 0,00:05:16.400,00:05:16.860,辉英,,0,0,0,,Okay.
Dialogue: 0,00:05:17.480,00:05:22.320,辉英,,0,0,0,,And if you go up, it's a finer grid.
Dialogue: 0,00:05:23.180,00:05:26.380,辉英,,0,0,0,,And going down is a coarser grid.
Dialogue: 0,00:05:36.360,00:05:40.580,辉英,,0,0,0,,So multigrid would always start with the finest grid.
Dialogue: 0,00:05:41.020,00:05:44.020,辉英,,0,0,0,,So the finest grid is where we discretize the equation
Dialogue: 0,00:05:44.020,00:05:45.120,辉英,,0,0,0,,because on that grid, we have a lot of grids.
Dialogue: 0,00:05:45.120,00:05:45.140,辉英,,0,0,0,,So we have a lot of grids.
Dialogue: 0,00:05:45.140,00:05:47.780,辉英,,0,0,0,,So on that grid, we can compute what the right-hand side is.
Dialogue: 0,00:05:48.300,00:05:51.220,辉英,,0,0,0,,On that grid, we have the matrix.
Dialogue: 0,00:05:51.560,00:05:52.460,辉英,,0,0,0,,We have the right-hand side.
Dialogue: 0,00:05:53.260,00:06:01.320,辉英,,0,0,0,,So on that grid, we compute the b minus ax that we call the residual.
Dialogue: 0,00:06:02.600,00:06:06.880,辉英,,0,0,0,,And we can think of all what we are doing in iterative method
Dialogue: 0,00:06:06.880,00:06:13.420,辉英,,0,0,0,,is to compute is going to have a successively better approximation to x
Dialogue: 0,00:06:13.420,00:06:15.120,辉英,,0,0,0,,in order to drive the result.
Dialogue: 0,00:06:15.120,00:06:17.020,辉英,,0,0,0,,So we can compute the residual r to zero.
Dialogue: 0,00:06:17.020,00:06:19.800,辉英,,0,0,0,,So this is our first approximation.
Dialogue: 0,00:06:19.800,00:06:27.500,辉英,,0,0,0,,And then what we are doing in the coarser grids
Dialogue: 0,00:06:27.500,00:06:35.120,辉英,,0,0,0,,is to solve for the correction.
Dialogue: 0,00:06:35.120,00:06:36.660,辉英,,0,0,0,,So what is the correction?
Dialogue: 0,00:06:36.660,00:06:45.100,辉英,,0,0,0,,So for delta x such that a times delta x is equal to a times delta x.
Dialogue: 0,00:06:45.100,00:06:46.100,辉英,,0,0,0,,So if we can solve for the correction,
Dialogue: 0,00:06:46.100,00:06:47.100,辉英,,0,0,0,,what we can do is we can solve for a times delta x
Dialogue: 0,00:06:47.100,00:06:48.100,辉英,,0,0,0,,would be equal to this r.
Dialogue: 0,00:06:48.100,00:06:49.100,辉英,,0,0,0,,Let me see if that's the case.
Dialogue: 0,00:06:49.100,00:06:50.100,辉英,,0,0,0,,Yes, would be equal to r.
Dialogue: 0,00:06:50.100,00:06:57.360,辉英,,0,0,0,,So if we can solve a times delta x equal to r,
Dialogue: 0,00:06:57.360,00:07:07.460,辉英,,0,0,0,,then my x zero because I know that my a times x zero
Dialogue: 0,00:07:07.460,00:07:11.600,辉英,,0,0,0,,would equal to b minus r, right?
Dialogue: 0,00:07:11.600,00:07:12.600,辉英,,0,0,0,,So this is a rearrangement.
Dialogue: 0,00:07:12.600,00:07:13.600,辉英,,0,0,0,,So here's the B minus r.
Dialogue: 0,00:07:13.600,00:07:14.600,辉英,,0,0,0,,So this is actually a B minus r.
Dialogue: 0,00:07:14.600,00:07:15.000,辉英,,0,0,0,,So this is a B minus r.
Dialogue: 0,00:07:15.000,00:07:29.780,辉英,,0,0,0,,of the definition of R so let's see then a times X 0 plus Delta X 0 the
Dialogue: 0,00:07:29.780,00:07:41.000,辉英,,0,0,0,,correction would be equal to B does that make sense so instead of solving
Dialogue: 0,00:07:41.000,00:07:47.600,辉英,,0,0,0,,directly for X we can solve this correction equation a times Delta X
Dialogue: 0,00:07:47.600,00:07:56.300,辉英,,0,0,0,,equal to R where R is the residual of my best guess yet and if we can exactly
Dialogue: 0,00:07:56.300,00:08:03.320,辉英,,0,0,0,,solve the correction equation we get the exact solution and but even if we can
Dialogue: 0,00:08:03.320,00:08:08.120,辉英,,0,0,0,,approximately solve this correction equation we get a better approximation
Dialogue: 0,00:08:08.120,00:08:11.000,辉英,,0,0,0,,to the solution by adding the original solution
Dialogue: 0,00:08:11.000,00:08:17.620,辉英,,0,0,0,,with my Delta X and why are we doing this in multi-grid we are doing this in
Dialogue: 0,00:08:17.620,00:08:24.940,辉英,,0,0,0,,multi-grid because as we go to causal grids we no longer have an as good
Dialogue: 0,00:08:24.940,00:08:30.520,辉英,,0,0,0,,approximation to the differential equation as in the final grid and what
Dialogue: 0,00:08:30.520,00:08:35.300,辉英,,0,0,0,,we want is that if on the final grid we already have a very good solution which
Dialogue: 0,00:08:35.300,00:08:40.480,辉英,,0,0,0,,we hope is true as we move towards the right-hand side of the algorithm
Dialogue: 0,00:08:40.480,00:08:40.980,辉英,,0,0,0,,you
Dialogue: 0,00:08:41.000,00:08:45.320,辉英,,0,0,0,,if we already have a good solution we don't want to spoil it in the in the
Dialogue: 0,00:08:45.320,00:08:52.640,辉英,,0,0,0,,course grid right therefore we want to solve this correction equation because
Dialogue: 0,00:08:52.640,00:08:58.920,辉英,,0,0,0,,if we already have a very good solution that R should be very small and the
Dialogue: 0,00:08:58.920,00:09:04.020,辉英,,0,0,0,,resulting Delta X would always hopefully give an improvement to the solution
Dialogue: 0,00:09:04.020,00:09:09.640,辉英,,0,0,0,,instead of the other way if we keep solving the original equation on the
Dialogue: 0,00:09:09.640,00:09:10.740,辉英,,0,0,0,,coarse grid then you'll be able to solve this equation without making a big change to the solution.
Dialogue: 0,00:09:11.000,00:09:17.240,辉英,,0,0,0,,the cross grid would always have a mismatch with the final grid and that's something we don't want
Dialogue: 0,00:09:17.240,00:09:22.600,辉英,,0,0,0,,we always want the cost of grades to improve upon the best solution we have on the final grid
Dialogue: 0,00:09:22.600,00:09:25.720,辉英,,0,0,0,,we want the whole solution to converge the solution of the final grid
Dialogue: 0,00:09:26.680,00:09:33.320,辉英,,0,0,0,,so when we go to the cross grid we want to interpolate we first want to interpolate
Dialogue: 0,00:09:33.320,00:09:41.720,辉英,,0,0,0,,the residual r0 to cost grid
Dialogue: 0,00:09:45.960,00:09:53.560,辉英,,0,0,0,,once we interpolated r0 now my r0 is on the cost grid then i solve my delta x 0
Dialogue: 0,00:09:55.800,00:10:00.840,辉英,,0,0,0,,is equal to is approximately equal to a inverse
Dialogue: 0,00:10:03.320,00:10:12.200,辉英,,0,0,0,,times r0 and how do we do this approximation we can perform a few jacobi iterations or a few
Dialogue: 0,00:10:12.200,00:10:18.840,辉英,,0,0,0,,a few gauss-seidel iterations remember on the cost of grids the moles that we can represent
Dialogue: 0,00:10:18.840,00:10:24.840,辉英,,0,0,0,,on the closer grid would always converge faster than how they would converge in the fine grid
Dialogue: 0,00:10:27.240,00:10:33.080,辉英,,0,0,0,,okay so once we solved this we can now
Dialogue: 0,00:10:33.320,00:10:44.840,辉英,,0,0,0,,go back and interpolate the delta x 0 to fine grid
Dialogue: 0,00:10:46.760,00:10:53.320,辉英,,0,0,0,,so this is a two grid algorithm we have one fine grid one cross grid we are going to generalize to
Dialogue: 0,00:10:53.320,00:11:03.080,辉英,,0,0,0,,a multi-grid pretty soon and then we perform x 1 would be equal to x 0 plus that delta x 0
Dialogue: 0,00:11:03.320,00:11:06.520,辉英,,0,0,0,,of zero coming from the cost grid
Dialogue: 0,00:11:10.280,00:11:18.200,辉英,,0,0,0,,okay and now we are going to do this again but before we do this this again we want to perform
Dialogue: 0,00:11:18.200,00:11:24.840,辉英,,0,0,0,,a few other iterations on the fine grid and what is the purpose of of performing a few
Dialogue: 0,00:11:25.480,00:11:32.840,辉英,,0,0,0,,jacobi or gauss-seidel iterations on the on the fine grid the purpose is to get the residual
Dialogue: 0,00:11:33.880,00:11:41.720,辉英,,0,0,0,,to be at a good enough state to be smooth enough so that the residual can be interpolated
Dialogue: 0,00:11:42.280,00:11:56.680,辉英,,0,0,0,,to the cost grid all right okay so so here we move towards uh uh iterations on fine grid
Dialogue: 0,00:11:59.640,00:12:03.240,辉英,,0,0,0,,and then go back again so so we go back and
Dialogue: 0,00:12:03.320,00:12:08.920,辉英,,0,0,0,,compute the residual and interpolate the residual to the cross grid and perform iterations on the
Dialogue: 0,00:12:08.920,00:12:12.360,辉英,,0,0,0,,on the cross grid and interpolate the correction back to the fine grid
Dialogue: 0,00:12:14.600,00:12:25.320,辉英,,0,0,0,,okay so so the two so the uh so the ingredients that are important is one computing
Dialogue: 0,00:12:27.320,00:12:33.160,辉英,,0,0,0,,residual so that's over here and the interpolating
Dialogue: 0,00:12:33.320,00:12:40.280,辉英,,0,0,0,,residual to the cost of grids
Dialogue: 0,00:12:44.680,00:12:47.080,辉英,,0,0,0,,and the three is uh
Dialogue: 0,00:12:51.720,00:13:01.560,辉英,,0,0,0,,is uh iteration iterative solver on both course
Dialogue: 0,00:13:01.560,00:13:03.160,辉英,,0,0,0,,and course and
Dialogue: 0,00:13:03.320,00:13:03.880,辉英,,0,0,0,,fine grid
Dialogue: 0,00:13:07.320,00:13:10.600,辉英,,0,0,0,,and four is interpolating
Dialogue: 0,00:13:13.400,00:13:15.160,辉英,,0,0,0,,not the residual but the solution
Dialogue: 0,00:13:17.400,00:13:18.280,辉英,,0,0,0,,to find a grid
Dialogue: 0,00:13:20.760,00:13:27.800,辉英,,0,0,0,,so once we have all these four components we can put together a multi-grid solver all right
Dialogue: 0,00:13:31.000,00:13:31.480,辉英,,0,0,0,,any questions so far on this uh overall uh oh any other uh if there's any other uh questions that I have as well?
Dialogue: 0,00:13:31.480,00:13:31.720,辉英,,0,0,0,,I think that's it for this video, I hope you have a good one and I hope to see you in the next one.
Dialogue: 0,00:13:31.720,00:13:32.220,辉英,,0,0,0,,So thanks for watching and I will see you in the next video.
Dialogue: 0,00:13:32.220,00:13:32.840,辉英,,0,0,0,,Thank you all and have a nice day.
Dialogue: 0,00:13:33.320,00:13:55.340,辉英,,0,0,0,,idea yes oh yes actually if you can design the grid so that you don't need
Dialogue: 0,00:13:55.340,00:13:59.360,辉英,,0,0,0,,interpolation that will be great so then the interpolation is a trivial
Dialogue: 0,00:13:59.360,00:14:06.860,辉英,,0,0,0,,interpolation that's right just picking the values right
