[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: None
PlayResX: 1080
PlayResY: 720

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: 辉英,Tahoma,35,&H00FFFFFF,&H000000FF,&H003B3C3D,&H00000000,0,0,0,0,70,70,1,0,1,1.3,0.2,2,0,0,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,00:00:00.000,00:00:09.080,辉英,,0,0,0,,So before we go to more complex iterative methods, let's introduce another very
Dialogue: 0,00:00:09.080,00:00:15.600,辉英,,0,0,0,,simple iterative method called the Gauss-Seidel method. It is very similar to the
Dialogue: 0,00:00:15.600,00:00:20.880,辉英,,0,0,0,,Jacobi iteration method in terms of we are solving a u equal to b and we are
Dialogue: 0,00:00:20.880,00:00:29.640,辉英,,0,0,0,,writing a into the summation of lower diagonal and upper diagonal parts. And
Dialogue: 0,00:00:29.640,00:00:38.400,辉英,,0,0,0,,therefore this equation can be rewritten as l plus d, so l u plus d u plus u u equal to b.
Dialogue: 0,00:00:39.400,00:00:52.120,辉英,,0,0,0,,Now instead of moving both l and u to the right hand side, we only move u to the right hand side.
Dialogue: 0,00:00:52.120,00:00:58.840,辉英,,0,0,0,,So l plus d times u would be equal to b minus u.
Dialogue: 0,00:00:59.640,00:01:05.240,辉英,,0,0,0,,And now we put indices. This is k plus 1 and this is k.
Dialogue: 0,00:01:08.280,00:01:14.920,辉英,,0,0,0,,The value of this splitting is that this iteration would be easy to perform.
Dialogue: 0,00:01:16.200,00:01:19.800,辉英,,0,0,0,,Last time when we are talking about Jacobi iteration, it is easy to perform because the
Dialogue: 0,00:01:19.800,00:01:29.080,辉英,,0,0,0,,left-hand side involves inverting d only. So why is inverting d only easy?
Dialogue: 0,00:01:29.640,00:01:31.640,辉英,,0,0,0,,Because the left-hand side involves inverting d only.
Dialogue: 0,00:01:31.640,00:01:40.440,辉英,,0,0,0,,It's diagonal, right? So the inversion of d can be computed explicitly. It's just another diagonal matrix with the
Dialogue: 0,00:01:40.440,00:01:52.200,辉英,,0,0,0,,reciprocal of the diagonal entries of d. But this is more complex. This is l plus d and l plus d is not a diagonal matrix.
Dialogue: 0,00:01:52.200,00:01:55.240,辉英,,0,0,0,,It is a matrix with what?
Dialogue: 0,00:01:55.240,00:01:57.240,辉英,,0,0,0,,With lower diagonal matrix.
Dialogue: 0,00:01:57.240,00:01:59.240,辉英,,0,0,0,,It is a lower diagonal matrix.
Dialogue: 0,00:01:59.640,00:02:03.640,辉英,,0,0,0,,And how do we invert a lower diagonal matrix?
Dialogue: 0,00:02:03.640,00:02:13.640,辉英,,0,0,0,,It's not that easy, right?
Dialogue: 0,00:02:13.640,00:02:23.640,辉英,,0,0,0,,But it can also be done without having to perform complex manipulation to the matrix.
Dialogue: 0,00:02:23.640,00:02:27.640,辉英,,0,0,0,,So let's look at what the lower diagonal matrix is.
Dialogue: 0,00:02:27.640,00:02:29.640,辉英,,0,0,0,,So we only keep one matrix.
Dialogue: 0,00:02:29.640,00:02:35.640,辉英,,0,0,0,,The diagonal and lower diagonal parts, etc.
Dialogue: 0,00:02:35.640,00:02:43.640,辉英,,0,0,0,,Times u1 of k plus 1, u2 of k plus 1.
Dialogue: 0,00:02:43.640,00:02:49.640,辉英,,0,0,0,,So imagine we are at the kth iteration and the u k is already known.
Dialogue: 0,00:02:49.640,00:02:55.640,辉英,,0,0,0,,So it is equal to b1 minus u k1.
Dialogue: 0,00:02:55.640,00:02:57.640,辉英,,0,0,0,,And the right-hand side is completely known.
Dialogue: 0,00:02:57.640,00:02:59.640,辉英,,0,0,0,,B2 minus u k2, etc.
Dialogue: 0,00:02:59.640,00:03:11.720,辉英,,0,0,0,,to be a minus UK n so where should we start in computing these u of k plus 1
Dialogue: 0,00:03:15.720,00:03:24.060,辉英,,0,0,0,,oh yeah sorry we have a big view here yeah thank you yeah mistake so so here
Dialogue: 0,00:03:24.060,00:03:30.300,辉英,,0,0,0,,we are let's see we already computed you you so you you is easy to compute
Dialogue: 0,00:03:30.300,00:03:41.280,辉英,,0,0,0,,because it's a explicit multiplication right so you UK of 1 you UK of 2 so so
Dialogue: 0,00:03:41.280,00:03:53.880,辉英,,0,0,0,,all of these entries are you times UK at the corresponding row of that okay
Dialogue: 0,00:03:53.880,00:03:54.040,辉英,,0,0,0,,okay so now we have a negative equation and we are going to compute the value of
Dialogue: 0,00:03:54.040,00:03:58.780,辉英,,0,0,0,,so so now we have the right hand side and we have a lower diagonal matrix where
Dialogue: 0,00:03:58.780,00:04:05.740,辉英,,0,0,0,,should we start we start from the first row or the last row first row because the
Dialogue: 0,00:04:05.740,00:04:13.700,辉英,,0,0,0,,first row is a 1 1 times u 1 of k plus 1 equal to a known number so in that is
Dialogue: 0,00:04:13.700,00:04:20.620,辉英,,0,0,0,,easy we just need to take the reciprocal of a 1 1 multiplied with the first row
Dialogue: 0,00:04:20.620,00:04:23.860,辉英,,0,0,0,,of the right hand side we get u 1 of k plus 1
Dialogue: 0,00:04:23.860,00:04:32.220,辉英,,0,0,0,,so just give us k they wasted and now you see you can take a set of our
Dialogue: 0,00:04:37.840,00:04:42.260,辉英,,0,0,0,,answers and out of the state thinking which thing we assumed is 2 and also
Dialogue: 0,00:04:42.260,00:04:47.480,辉英,,0,0,0,,here you can see that we are not going to get 0 here we presenting those first
Dialogue: 0,00:04:47.480,00:04:51.500,辉英,,0,0,0,,staffers now if we continue to можете input the terms of the first column and
Dialogue: 0,00:04:51.500,00:04:53.560,辉英,,0,0,0,,we keep talking these statics to isn't it going toصل it out and get the other
Dialogue: 0,00:04:53.560,00:04:58.180,辉英,,0,0,0,,Once we solve for the first two entries, we can just get the third entry by using the same procedure.
Dialogue: 0,00:05:00.180,00:05:00.740,辉英,,0,0,0,,Right?
Dialogue: 0,00:05:00.980,00:05:04.020,辉英,,0,0,0,,So we solve this one by one.
Dialogue: 0,00:05:05.680,00:05:10.460,辉英,,0,0,0,,This is why Gauss-Seidel iteration is easy to implement.
Dialogue: 0,00:05:11.500,00:05:16.180,辉英,,0,0,0,,It's because once we have the first, the first entry is easy to get.
Dialogue: 0,00:05:16.280,00:05:20.740,辉英,,0,0,0,,And once we have the first entry, we get all the subsequent entries pretty easily.
Dialogue: 0,00:05:20.740,00:05:28.700,辉英,,0,0,0,,So for example, let's see how do we apply this to Poisson's equation.
Dialogue: 0,00:05:29.720,00:05:30.480,辉英,,0,0,0,,Yeah.
Dialogue: 0,00:05:31.640,00:05:48.120,辉英,,0,0,0,,So in Poisson's equation, we are solving u of i minus 1 minus u of 2 of ui plus u of i plus 1 divided by delta x squared equal to bi.
Dialogue: 0,00:05:48.900,00:05:50.720,辉英,,0,0,0,,And we would have...
Dialogue: 0,00:05:50.740,00:05:57.920,辉英,,0,0,0,,We would have k plus 1 here, k plus 1 here, because this is lower diagonal, and k here.
Dialogue: 0,00:05:58.980,00:05:59.160,辉英,,0,0,0,,Right?
Dialogue: 0,00:06:01.200,00:06:09.280,辉英,,0,0,0,,As opposed to k both on i minus 1 and i plus 1, we now have k only at i plus 1, the upper diagonal part.
Dialogue: 0,00:06:09.740,00:06:13.000,辉英,,0,0,0,,And the lower and the diagonal part are now k plus 1.
Dialogue: 0,00:06:16.020,00:06:20.000,辉英,,0,0,0,,I would argue this is as easy to apply as...
Dialogue: 0,00:06:20.740,00:06:21.880,辉英,,0,0,0,,Jacobi's iteration.
Dialogue: 0,00:06:23.300,00:06:24.180,辉英,,0,0,0,,This is...
Dialogue: 0,00:06:24.180,00:06:29.140,辉英,,0,0,0,,This is because when I sweep from the first i to the last i,
Dialogue: 0,00:06:29.140,00:06:33.380,辉英,,0,0,0,,I have already computed ui minus 1 at the k plus 1 iteration.
Dialogue: 0,00:06:34.360,00:06:41.580,辉英,,0,0,0,,Now I am supposed to compute ui at k plus 1 iteration.
Dialogue: 0,00:06:42.240,00:06:44.140,辉英,,0,0,0,,That would be equal to...
Dialogue: 0,00:06:45.980,00:06:50.720,辉英,,0,0,0,,minus delta x over 2 times bi.
Dialogue: 0,00:06:50.740,00:06:58.300,辉英,,0,0,0,,So I have ui plus the average of ui minus 1 k plus 1.
Dialogue: 0,00:06:58.300,00:07:01.540,辉英,,0,0,0,,Now this is the only difference from Jacobi's iteration.
Dialogue: 0,00:07:02.140,00:07:03.500,辉英,,0,0,0,,u of i plus 1 k.
Dialogue: 0,00:07:05.040,00:07:07.120,辉英,,0,0,0,,So this is actually...
Dialogue: 0,00:07:07.120,00:07:08.520,辉英,,0,0,0,,This is the only difference.
Dialogue: 0,00:07:08.680,00:07:13.840,辉英,,0,0,0,,And this is the value I just have computed, right, in my previous i.
Dialogue: 0,00:07:14.480,00:07:19.120,辉英,,0,0,0,,So instead of using the old ui minus 1,
Dialogue: 0,00:07:19.420,00:07:20.720,辉英,,0,0,0,,the value for ui minus 1,
Dialogue: 0,00:07:20.740,00:07:22.740,辉英,,0,0,0,,I just use the value from the last entire iteration.
Dialogue: 0,00:07:22.740,00:07:26.740,辉英,,0,0,0,,I use the value at the current iteration I just have computed.
Dialogue: 0,00:07:28.240,00:07:28.740,辉英,,0,0,0,,Okay?
Dialogue: 0,00:07:28.740,00:07:33.740,辉英,,0,0,0,,The major difference between Jacobi's iteration and Gauss-Seidel's iteration is...
Dialogue: 0,00:07:35.740,00:07:38.740,辉英,,0,0,0,,The major difference is I can't now apply this in parallel
Dialogue: 0,00:07:38.740,00:07:42.240,辉英,,0,0,0,,because I have to compute all the i's in serial.
Dialogue: 0,00:07:42.240,00:07:45.240,辉英,,0,0,0,,I have to rely on my previous i to get the current i.
Dialogue: 0,00:07:46.240,00:07:49.240,辉英,,0,0,0,,Well, Jacobi's iteration is very easy to parallelize.
Dialogue: 0,00:07:50.740,00:07:57.440,辉英,,0,0,0,,Okay, so in the two-dimensional case, it's equally easy.
Dialogue: 0,00:07:58.740,00:08:05.120,辉英,,0,0,0,,In the two-dimensional case, I would have u of ij at k plus 1
Dialogue: 0,00:08:05.120,00:08:11.620,辉英,,0,0,0,,would be equal to delta x squared over 4 minus bij, right?
Dialogue: 0,00:08:12.340,00:08:19.740,辉英,,0,0,0,,And here I would be having something over 4 of ui minus 1 j.
Dialogue: 0,00:08:19.900,00:08:20.720,辉英,,0,0,0,,Okay, should this be k?
Dialogue: 0,00:08:20.740,00:08:21.740,辉英,,0,0,0,,k plus 1 over k?
Dialogue: 0,00:08:24.240,00:08:26.540,辉英,,0,0,0,,Is this something I already have or I don't have?
Dialogue: 0,00:08:32.860,00:08:34.240,辉英,,0,0,0,,Right, I have multiple terms.
Dialogue: 0,00:08:34.240,00:08:37.060,辉英,,0,0,0,,I also have ui plus 1 j.
Dialogue: 0,00:08:38.120,00:08:43.740,辉英,,0,0,0,,ui j minus 1, ui j plus 1, right?
Dialogue: 0,00:08:43.860,00:08:44.240,辉英,,0,0,0,,So this is...
Dialogue: 0,00:08:45.420,00:08:49.260,辉英,,0,0,0,,If I remove the superscripts, this would be the Poisson's equation.
Dialogue: 0,00:08:49.260,00:08:52.860,辉英,,0,0,0,,So now I need to put superscripts on all of these.
Dialogue: 0,00:08:53.400,00:08:58.300,辉英,,0,0,0,,In Jacobi's iteration, I basically put k plus 1 on everything I already computed
Dialogue: 0,00:08:58.300,00:09:00.700,辉英,,0,0,0,,and k on everything I have not computed.
Dialogue: 0,00:09:01.440,00:09:08.460,辉英,,0,0,0,,So if I go from smaller i to bigger i and smaller j to bigger j,
Dialogue: 0,00:09:08.660,00:09:11.880,辉英,,0,0,0,,what are the terms that I should put as k plus 1?
Dialogue: 0,00:09:16.820,00:09:18.760,辉英,,0,0,0,,I want to find out the bigger one.
Dialogue: 0,00:09:19.080,00:09:19.240,辉英,,0,0,0,,Yes.
Dialogue: 0,00:09:19.260,00:09:22.560,辉英,,0,0,0,,All the minus 1s is something I already computed.
Dialogue: 0,00:09:22.880,00:09:24.980,辉英,,0,0,0,,Well, this term is something I haven't computed.
Dialogue: 0,00:09:25.360,00:09:26.760,辉英,,0,0,0,,This is what I have computed.
Dialogue: 0,00:09:27.180,00:09:29.920,辉英,,0,0,0,,This is something I have not computed, right?
Dialogue: 0,00:09:33.100,00:09:39.560,辉英,,0,0,0,,So this would be how we apply the Gauss-Seidel iteration to a 2D Poisson's equation.
