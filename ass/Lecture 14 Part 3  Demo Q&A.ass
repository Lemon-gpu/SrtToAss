[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: None
PlayResX: 1080
PlayResY: 720

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1
Style: 辉英,Tahoma,35,&H00FFFFFF,&H000000FF,&H003B3C3D,&H00000000,0,0,0,0,70,70,1,0,1,1.3,0.2,2,0,0,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,00:00:00.000,00:00:07.000,辉英,,0,0,0,,Any questions so far? Yes?
Dialogue: 0,00:00:07.000,00:00:13.000,辉英,,0,0,0,,How does that function to the quadrature points ?
Dialogue: 0,00:00:13.000,00:00:20.000,辉英,,0,0,0,,Because of that, and I know you said they're a little more sparse in the middle of the interval,
Dialogue: 0,00:00:20.000,00:00:25.000,辉英,,0,0,0,,and they're tighter on the edges, but how does it decide that?
Dialogue: 0,00:00:25.000,00:00:34.000,辉英,,0,0,0,,The algorithm for computing Gauss quadrature points has evolved for basically 100 years.
Dialogue: 0,00:00:34.000,00:00:44.000,辉英,,0,0,0,,It was initially proposed by Gauss. At that time, there were no computers, and they had to calculate by hand what the Gauss quadrature points were.
Dialogue: 0,00:00:44.000,00:00:52.000,辉英,,0,0,0,,But because Gauss quadrature points is already very useful with five points,
Dialogue: 0,00:00:52.000,00:00:55.000,辉英,,0,0,0,,they actually spent a lot of time calculating the quadrature points.
Dialogue: 0,00:00:55.000,00:01:01.000,辉英,,0,0,0,,So they were manipulating the Gauss quadrature points for up to, say, 10 points by hand.
Dialogue: 0,00:01:01.000,00:01:13.000,辉英,,0,0,0,,Basically solving n plus 1, no, not n plus 1, solving these two n nonlinear equations to get these two n numbers.
Dialogue: 0,00:01:13.000,00:01:18.000,辉英,,0,0,0,,So the two n numbers are the locations, n locations and n weights.
Dialogue: 0,00:01:18.000,00:01:25.000,辉英,,0,0,0,,And the two n equations you have to solve are the fact that when you plug in any polynomial
Dialogue: 0,00:01:25.000,00:01:31.000,辉英,,0,0,0,,of order 2n minus 1, which have 2n degrees of freedom, right?
Dialogue: 0,00:01:31.000,00:01:38.000,辉英,,0,0,0,,So you have the constant term, you have first order term, up to 2n minus 1th order term in the polynomial.
Dialogue: 0,00:01:38.000,00:01:41.000,辉英,,0,0,0,,So you have to solve two n equations, get two n unknowns.
Dialogue: 0,00:01:41.000,00:01:46.000,辉英,,0,0,0,,And people did this by hand, like up to something like 10 points.
Dialogue: 0,00:01:46.000,00:01:52.000,辉英,,0,0,0,,But after the computer was invented, there has been a series of advances in algorithms of how to compute them.
Dialogue: 0,00:01:52.000,00:01:55.000,辉英,,0,0,0,,So it turns out there are much smarter ways.
Dialogue: 0,00:01:55.000,00:01:59.000,辉英,,0,0,0,,Than just solving these two n equations.
Dialogue: 0,00:01:59.000,00:02:13.000,辉英,,0,0,0,,And a lot of the nowadays, one of the quite very simple and pretty accurate algorithms is used what's called orthogonal polynomials.
Dialogue: 0,00:02:13.000,00:02:20.000,辉英,,0,0,0,,So there are a set of orthogonal polynomials whose zero point.
Dialogue: 0,00:02:20.000,00:02:25.000,辉英,,0,0,0,,So in this case, if you want to integrate a uniform function,
Dialogue: 0,00:02:25.000,00:02:30.000,辉英,,0,0,0,,the polynomial corresponding to these axes are called the Legendre polynomials.
Dialogue: 0,00:02:30.000,00:02:35.000,辉英,,0,0,0,,So Legendre polynomials is a set of orthogonal polynomials you can compute.
Dialogue: 0,00:02:35.000,00:02:42.000,辉英,,0,0,0,,You can compute every polynomial from a linear combination of the previous two polynomials times a simple function,
Dialogue: 0,00:02:42.000,00:02:46.000,辉英,,0,0,0,,like x squared and remember what.
Dialogue: 0,00:02:46.000,00:02:53.000,辉英,,0,0,0,,So once you know the n and n minus 1th order polynomial, you can compute the n plus 1th order polynomial pretty fast.
Dialogue: 0,00:02:53.000,00:02:55.000,辉英,,0,0,0,,And if you can have an algorithm to find the root of the polynomial,
Dialogue: 0,00:02:55.000,00:03:00.000,辉英,,0,0,0,,these are exactly the Gauss quadrature points.
Dialogue: 0,00:03:00.000,00:03:05.000,辉英,,0,0,0,,Now you have the roots of the polynomials, then getting the weights.
Dialogue: 0,00:03:05.000,00:03:09.000,辉英,,0,0,0,,If you know the x, then getting the weights is simply solving a set of linear equations,
Dialogue: 0,00:03:09.000,00:03:12.000,辉英,,0,0,0,,which turns out to be pretty easy.
Dialogue: 0,00:03:12.000,00:03:22.000,辉英,,0,0,0,,But these are sufficient usually for the number of quadrature points we want to use in finding elements.
Dialogue: 0,00:03:22.000,00:03:24.000,辉英,,0,0,0,,But people have invented the...
Dialogue: 0,00:03:24.000,00:03:28.000,辉英,,0,0,0,,algorithms that can scale to a lot more points.
Dialogue: 0,00:03:28.000,00:03:35.000,辉英,,0,0,0,,There are even people who invented algorithms that goes to like a million points in Gauss quadrature.
Dialogue: 0,00:03:35.000,00:03:38.000,辉英,,0,0,0,,These are pretty...
Dialogue: 0,00:03:38.000,00:03:44.000,辉英,,0,0,0,,It's pretty rare to see applications that needs a million points in Gauss quadrature,
Dialogue: 0,00:03:44.000,00:03:46.000,辉英,,0,0,0,,but like you can do that.
Dialogue: 0,00:03:46.000,00:03:50.000,辉英,,0,0,0,,All right. Any other questions? Yes?
Dialogue: 0,00:03:50.000,00:03:52.000,辉英,,0,0,0,,Why don't we have to pre-calculate the Gauss quadrature?
Dialogue: 0,00:03:52.000,00:04:05.000,辉英,,0,0,0,,Why don't we have to pre-calculate the Gaussian points and weights for each set of our element?
Dialogue: 0,00:04:05.000,00:04:09.000,辉英,,0,0,0,,Right. That's a good point.
Dialogue: 0,00:04:09.000,00:04:14.000,辉英,,0,0,0,,So in practice, you don't. You just need to shift them and scale them.
Dialogue: 0,00:04:14.000,00:04:18.000,辉英,,0,0,0,,Okay. And that would be done in that for loop?
Dialogue: 0,00:04:18.000,00:04:20.000,辉英,,0,0,0,,Yeah. What's done in the for loop?
Dialogue: 0,00:04:20.000,00:04:23.000,辉英,,0,0,0,,So if we are recalculating these quadrature points,
Dialogue: 0,00:04:23.000,00:04:29.000,辉英,,0,0,0,,but in practice, a lot more computationally efficient way is to shift them and scale them.
Dialogue: 0,00:04:29.000,00:04:34.000,辉英,,0,0,0,,So for example, if I do...
Dialogue: 0,00:04:34.000,00:04:36.000,辉英,,0,0,0,,For example, if I do that, right?
Dialogue: 0,00:04:36.000,00:04:40.000,辉英,,0,0,0,,So I get a bunch of axes and weights.
Dialogue: 0,00:04:40.000,00:04:45.000,辉英,,0,0,0,,And if I also do that, I also get a bunch of x and weights.
Dialogue: 0,00:04:45.000,00:04:47.000,辉英,,0,0,0,,But they are exactly...
Dialogue: 0,00:04:47.000,00:04:49.000,辉英,,0,0,0,,So first of all, the x is...
Dialogue: 0,00:04:50.000,00:04:52.000,辉英,,0,0,0,,They are exactly linear to each other.
Dialogue: 0,00:04:52.000,00:04:58.000,辉英,,0,0,0,,For example, if I can do a figure and I can plot xL and xR,
Dialogue: 0,00:04:58.000,00:05:00.000,辉英,,0,0,0,,you can see they lie on a line.
Dialogue: 0,00:05:00.000,00:05:03.000,辉英,,0,0,0,,So they lie on a perfect line.
Dialogue: 0,00:05:03.000,00:05:06.000,辉英,,0,0,0,,They are just a shift and scale of each other.
Dialogue: 0,00:05:06.000,00:05:12.000,辉英,,0,0,0,,Also, if you plot the weights,
Dialogue: 0,00:05:12.000,00:05:14.000,辉英,,0,0,0,,they are also going to be...
Dialogue: 0,00:05:14.000,00:05:18.000,辉英,,0,0,0,,They are also lying on a simple line.
Dialogue: 0,00:05:18.000,00:05:20.000,辉英,,0,0,0,,The weights, they are...
Dialogue: 0,00:05:20.000,00:05:22.000,辉英,,0,0,0,,Because the weights go up and down,
Dialogue: 0,00:05:22.000,00:05:26.000,辉英,,0,0,0,,so the first weight is exactly the same as the last weight.
Dialogue: 0,00:05:26.000,00:05:29.000,辉英,,0,0,0,,And the second weight is exactly the same as the second last weight.
Dialogue: 0,00:05:29.000,00:05:35.000,辉英,,0,0,0,,So this is why there are only three points instead of five.
Dialogue: 0,00:05:35.000,00:05:42.000,辉英,,0,0,0,,But the ratio between the weights is basically the ratio between the length of the intervals.
Dialogue: 0,00:05:42.000,00:05:43.000,辉英,,0,0,0,,Right?
Dialogue: 0,00:05:43.000,00:05:45.000,辉英,,0,0,0,,And the ratio between the axes
Dialogue: 0,00:05:45.000,00:05:48.000,辉英,,0,0,0,,are also the ratio between the length of the intervals.
Dialogue: 0,00:05:48.000,00:05:53.000,辉英,,0,0,0,,And the shift is basically where my left point is.
Dialogue: 0,00:05:53.000,00:05:56.000,辉英,,0,0,0,,So yeah, you can just...
Dialogue: 0,00:05:56.000,00:05:59.000,辉英,,0,0,0,,A simple way is just to calculate the Gauss quadrature points and weights
Dialogue: 0,00:05:59.000,00:06:02.000,辉英,,0,0,0,,for a reference interval.
Dialogue: 0,00:06:02.000,00:06:05.000,辉英,,0,0,0,,A lot of people choose 0 and 1 or minus 1 and 1.
Dialogue: 0,00:06:05.000,00:06:09.000,辉英,,0,0,0,,And then shift and scale them for your arbitrary intervals.
